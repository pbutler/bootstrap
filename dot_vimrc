if &compatible
  set nocompatible               " Be iMproved
endif

set ruler
set signcolumn=yes:2
set completeopt-=preview
set noshowmode
set diffopt+=vertical
filetype plugin indent on

set encoding=utf-8
if has("pythonx")
  set pyxversion=3
endif

let mapleader=","
let maplocalleader="\\"
let g:tex_flavor='latex'
let g:vimtex_view_method='skim'  "mupdf'
let g:vimtex_quickfix_mode=0
" let g:vimtex_latexmk_progname= 'nvr'
set conceallevel=1
let g:tex_conceal='abdmg'

set hidden
set laststatus=2
set undofile
set undodir=~/.cache/vim/undos
set directory=~/.cache/vim/tmp
set backupdir=~/.cache/vim/backup
set autochdir


let g:python3_host_prog = $HOME.'/.virtualenvs/neovim-py3/bin/python'
" let g:python_host_prog = $HOME.'/.virtualenvs/neovim-py2/bin/python'

set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('~/.cache/dein')
  call dein#begin('~/.cache/dein', ['~/.config/init.vim', '~/.vimrc'])

  " Let dein manage dein
  " Required:
  call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')
  call dein#add('haya14busa/dein-command.vim')

  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif

  " Colors
  call dein#add('iCyMind/NeoSolarized')
  "call dein#add('altercation/vim-colors-solarized.git')
  " call dein#add('ajmwagar/vim-deus')
  "call dein#add('mhartington/oceanic-next')
  "call dein#add('lifepillar/vim-solarized8')
  call dein#add('ishan9299/nvim-solarized-lua')
  " call dein#add('bluz71/vim-nightfly-guicolors')
  call dein#add('glepnir/zephyr-nvim')
  call dein#add('eddyekofo94/gruvbox-flat.nvim')
  " call dein#add('savq/melange')

  " file explorer
  call dein#add('Shougo/defx.nvim')
  call dein#add('kristijanhusak/defx-icons')
  call dein#add('kristijanhusak/defx-git')

  call dein#add('schickling/vim-bufonly')
  call dein#add('ntpeters/vim-better-whitespace')
  call dein#add('nathanaelkane/vim-indent-guides')

  "call dein#add('Shougo/denite.nvim')
  call dein#add('Shougo/neoyank.vim')
  call dein#add('chemzqm/unite-location')
  "call dein#add('raghur/fruzzy' , {'hook_post_source': "call fruzzy#install()"})
  call dein#add('nvim-lua/popup.nvim')
  call dein#add('nvim-lua/plenary.nvim')
  call dein#add('nvim-telescope/telescope.nvim')
  call dein#add('nvim-telescope/telescope-fzf-native.nvim', {'build': 'make'})
  call dein#add('nvim-treesitter/nvim-treesitter', {'hook_post_update': ':TSUpdate'})


  call dein#add('neovim/nvim-lspconfig')
  call dein#add('kabouzeid/nvim-lspinstall')
  call dein#add('folke/lsp-trouble.nvim')
  call dein#add('josa42/nvim-lightline-lsp')
  call dein#add('glepnir/lspsaga.nvim')
  call dein#add('kyazdani42/nvim-web-devicons')

  ""ale et al
  call dein#add('Shougo/deoplete.nvim')
  call dein#add('deoplete-plugins/deoplete-lsp')
  "call dein#add('ray-x/lsp_signature.nvim')

  " call dein#add('autozimu/LanguageClient-neovim', {'rev': 'next', 'build': 'bash install.sh'})
  call dein#add('Shougo/echodoc.vim')
  "call dein#add('dense-analysis/ale')

  call dein#add('SirVer/ultisnips')
  call dein#add('honza/vim-snippets.git')
  call dein#add('Konfekt/FastFold')
  call dein#add('sjl/gundo.vim')

  " git
  call dein#add('airblade/vim-gitgutter')
  call dein#add('gregsexton/gitv')
  call dein#add('tpope/vim-fugitive')
  call dein#add('idanarye/vim-merginal')

  " lightline
  call dein#add('itchyny/lightline.vim')
  call dein#add('mgee/lightline-bufferline')
  call dein#add('maximbaz/lightline-ale')


  call dein#add('sheerun/vim-polyglot')
  call dein#add('majutsushi/tagbar')
  call dein#add('scrooloose/nerdcommenter')

  call dein#add('jmcantrell/vim-virtualenv', {'on_ft': 'python'})
  call dein#add('tmhedberg/SimpylFold')
  call dein#add('kkoomen/vim-doge', {'hook_post_source': 'call doge#install({"headless": 1})'})


  call dein#add('pangloss/vim-javascript', {'on_ft': 'javascript.jsx'})

  "call dein#add('vimwiki/vimwiki')
  call dein#add('ryanoasis/vim-devicons')

  call dein#add('lervag/vimtex')
  call dein#add('lervag/wiki.vim')
  call dein#add('lervag/wiki-ft.vim')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

"End dein Scripts-------------------------

syntax enable


lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true
  },
}

--require'lsp_signature'.on_attach()

local nvim_lsp = require('lspconfig')
-- keymaps
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  -- nuf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)

  -- Set some keybinds conditional on server capabilities
  if client.resolved_capabilities.document_formatting then
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  elseif client.resolved_capabilities.document_range_formatting then
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
  end

  -- Set autocommands conditional on server_capabilities
  if client.resolved_capabilities.document_highlight then
    vim.api.nvim_exec([[
    augroup lsp_document_highlight
    autocmd! * <buffer>
    autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
    autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
    augroup END
    ]], false)
  end
end

-- config that activates keymaps and enables snippet support
local function make_config()
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = false
  return {
    -- enable snippet support
    capabilities = capabilities,
    -- map buffer local keybindings when the language server attaches
    on_attach = on_attach,
  }
end

-- lsp-install
local function setup_servers()
  require'lspinstall'.setup()


  require'lspconfig'.jedi_language_server.setup{}

  -- get all installed servers
  local servers = require'lspinstall'.installed_servers()

  for _, server in pairs(servers) do
    local config = make_config()

    -- language specific config
    if server == "diagnosticls" then
      config.filetypes = { "python" }
      config.init_options = {
        filetypes = { python = { "flake8" } },
        linters = {
          flake8 = {
            debounce = 100,
            sourceName = "flake8",
            command = "flake8",
            --args = { "%file" },
            args = { '--stdin-display-name', '%file', '%tempfile' },
            formatPattern = {
            "^(.+\\.py):(\\d+):(\\d+): (I|W|E|F)\\d+ (.+)$",
            {
              line = 2,
              column = 3,
              security = 4,
              message = 5 -- { "[", 5, "]" }
              }
            },
          --rootPatterns = ["pyproject.toml", "setup.py", "setup.cfg", ".git"],
          securities = {
            E = "error",
            W = "warning",
            I = "info",
            F = "error"
          },
        }
      }
      }
    end
    require'lspconfig'[server].setup(config)
  end
end

setup_servers()

-- Automatically reload after `:LspInstall <server>` so we don't have to restart neovim
require'lspinstall'.post_install_hook = function ()
  setup_servers() -- reload installed servers
  vim.cmd("bufdo e") -- this triggers the FileType autocmd that starts the server
end

local saga = require 'lspsaga'
saga.init_lsp_saga()

vim.fn.sign_define("LspDiagnosticsSignError", {text = "\u{f05e}", numhl = "LspDiagnosticsDefaultError"})
vim.fn.sign_define("LspDiagnosticsSignWarning", {text = "\u{f071}", numhl = "LspDiagnosticsDefaultWarning"})
vim.fn.sign_define("LspDiagnosticsSignInformation", {text = "\u{f129}", numhl = "LspDiagnosticsDefaultInformation"})
vim.fn.sign_define("LspDiagnosticsSignHint", {text = "\u{f124}", numhl = "LspDiagnosticsDefaultHint"})


require('telescope').setup {
  extensions = {
    fzf = {
      override_generic_sorter = true, -- override the generic sorter
      override_file_sorter = true,     -- override the file sorter
      case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
                                       -- the default case_mode is "smart_case"
    }
  }
}
require('telescope').load_extension('fzf')

EOF


nnoremap <leader>rn :Lspsaga rename<CR>
nnoremap <leader>xx <cmd>LspTroubleToggle<cr>

"ale settings
" let g:ale_sign_error = "\uf05e"
" let g:ale_sign_warning = "\uf071"
" let g:ale_sign_info = "\uf129"
" let g:ale_floating_preview = 1
" let g:ale_linters = {
"       \ 'python': ['black', 'flake8', 'isort', 'mypy', 'pyls', 'pyright'],
"       \ }
" nmap K <Plug>(ale_hover)
" nmap gd <Plug>(ale_go_to_definition)
" nmap gt <Plug>(ale_go_to_type_definition)
" nmap <leader>ai <Plug>(ale_import)
" nnoremap <silent> <leader>an :ALERename<CR>
" nmap <leader>ar <Plug>(ale_find_references)


"doge settings
let g:doge_mapping = '<Leader>dd'
let g:doge_doc_standard_python = 'sphinx'

" LanguageClient configuration
" let g:LanguageClient_diagnosticsEnable = 0
let g:LanguageClient_serverCommands = {
  \ 'python': ['pyls']
  \ }
let g:LanguageClient_useVirtualText = "CodeLens"

function LC_maps()
  if has_key(g:LanguageClient_serverCommands, &filetype)
    nnoremap <buffer> <silent> <leader>lcd :call LanguageClient#textDocument_hover()<cr>
    nnoremap <buffer> <silent> <leader>lcg :call LanguageClient#textDocument_definition()<CR>
    nnoremap <buffer> <silent> <leader>lcr :call LanguageClient#textDocument_rename()<CR>
  endif
endfunction

autocmd FileType * call LC_maps()

" deoplete configuration
let g:deoplete#enable_at_startup = 1

call deoplete#custom#source('_', 'converters',
      \['converter_remove_overlap',
      \ 'converter_truncate_abbr',
      \ 'converter_truncate_menu',
      \ 'converter_remove_paren',
      \ 'converter_auto_delimiter'])

autocmd FileType denite-filter
      \ call deoplete#custom#buffer_option('auto_complete', v:false)

inoremap <expr> <C-G> deoplete#undo_completion()
" tab-completion
inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-N>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-P>" : "\<C-H>"

inoremap <F3>  <nop>
inoremap <F4>  <nop>
inoremap <F8>  <nop>
inoremap <F9>  <nop>
inoremap <F10>  <nop>
inoremap <F11>  <nop>
inoremap <F12>  <nop>
nmap Q <nop>
let g:tagbar_left = 1
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
nmap <F2> :TagbarToggle<CR>

" let g:echodoc#type = 'signature'
" let g:echodoc_enable_at_startup = 1

let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'

" nerdcommenter
let g:NERDSpaceDelims = 0
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1

let g:bufferline_echo = 0

" ultisnips
let g:ultisnips_python_style = "sphinx"
let g:UltiSnipsExpandTrigger="<c-S>"


"
"
"  Templates config
if has("autocmd")
    augroup templates
        autocmd BufNewFile *.* silent! execute '0r ~/.vim/templates/template.'.expand("<afile>:e")
    augroup END
endif

nnoremap <silent> <leader>mx :w<CR>:!chmod +x %<CR>l<CR>
" vim-better-whitespace configuration
nnoremap <silent> <leader>rws :ToggleStripWhitespaceOnSave<CR>
nnoremap <silent> <leader>hws :ToggleWhitespace<CR>

if has("autocmd")
  autocmd BufEnter * EnableStripWhitespaceOnSave
endif

" autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endi

" Help Neovim check if file has changed on disc
" https://github.com/neovim/neovim/issues/2127
augroup checktime
    autocmd!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter,FocusGained,BufEnter,FocusLost,WinLeave * checktime
    endif
  augroup END

" let g:NERDTreeQuitOnOpen=1
"
"
" set showcmd
" set showmatch
" "set sessionoptions+=resize
"
set backspace=indent,eol,start

"
" " Enable modelines for users but not root
set modelines=5
if $USER != 'root'
   set modeline
 else
   set nomodeline
endif

"
" " Enable or disable spell checker
"
set spelllang=en_us
map <F6> :setlocal invspell spell?<CR>
map <F7> :setlocal invpaste paste?<CR>

" Color Stuff
" set t_Co=256
set termguicolors
set t_8f=[38;2;%lu;%lu;%lum
set t_8b=[48;2;%lu;%lu;%lum
set background=dark

let g:solarized_italics = 0
let g:solarized_termtrans = 1
let g:solarized_visibility = "high"
let g:neosolarized_visibility = "high"
let g:neosolarized_termcolors = 256
let g:neosolarized_termtrans = 1
let g:neosolarized_italic = 0

colorscheme zephyr

highlight ALEErrorSign  ctermfg=15 ctermbg=9 gui=bold guifg=#dc322f guibg=none
highlight ALEWarningSign  ctermfg=15 ctermbg=9 gui=bold guifg=#b58900 guibg=none

autocmd BufWritePost * call defx#redraw()
nnoremap <silent><leader>fl :Defx -split=vertical -winwidth=50 -direction=topleft<CR>
nnoremap <silent><leader>ft :Defx -toggle -resume -split=vertical -winwidth=50 -direction=topleft<CR>
nnoremap <silent><leader>fc :Defx -resume -split=vertical -winwidth=50 -direction=topleft -search=`expand('%:p')` `getcwd()`<CR>
call defx#custom#option('_', {
      \ 'columns': 'indent:icons:filename:type:git',
      \ })
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
        \ defx#is_directory() ?
        \ defx#do_action('open_tree', 'toggle') :
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
        \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
        \ defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
endfunction


" lightline-ale configuration
function! LightlineFugitive()
  try
    if expand('%:t') !~? 'denite\|Tagbar\|NERD' && exists('*FugitiveHead')
      let mark = ' '  " edit here for cool mark
      let branch = FugitiveHead()
      return branch !=# '' ? mark.branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyVirtualenv()
  if &filetype == "python"
    let _ = virtualenv#statusline()
    return strlen(_) ? _ : ''
  endif
 return ''
endfunction
let g:lightline#lsp#indicator_checking = "\uf110"
let g:lightline#lsp#indicator_infos = "\uf129"
let g:lightline#lsp#indicator_warnings = "\uf071"
let g:lightline#lsp#indicator_errors = "\uf05e"
let g:lightline#lsp#indicator_hints = "\uf124"
let g:lightline#lsp#indicator_ok = "\uf00c"

let g:lightline#bufferline#show_number = 1
let g:lightline#bufferline#modified = "+"
let g:lightline#bufferline#unnamed = '[No Name]'
", 'linter_ok' ]
let g:lightline = {
      \ 'separator' :   { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' },
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [
      \              [ 'mode', 'paste' ],
      \              [ 'fugitive'],
      \              [ 'virtualenv' ],
      \              [ 'buffers' ]
      \            ],
      \   'right': [
      \              [ 'percent' ],
      \              [ 'lineinfo' ],
      \              [ 'linter_hints', 'linter_infos', 'linter_errors', 'linter_warnings', 'linter_checking']
      \            ]
      \ },
      \ 'component_expand':{
      \  'linter_infos': 'lightline#lsp#info',
      \  'linter_warnings': 'lightline#lsp#warnings',
      \  'linter_hints': 'lightline#lsp#hints',
      \  'linter_errors': 'lightline#lsp#errors',
      \  'linter_ok': 'lightline#lsp#ok',
      \  'linter_checking': 'lightline#lsp#checking',
      \  'buffers': 'lightline#bufferline#buffers'
      \ },
      \ 'component_function': {
      \  'virtualenv': 'MyVirtualenv',
      \   'fugitive': 'LightlineFugitive',
      \ },
      \ 'component_type': {
      \     'buffers': 'tabsel',
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_infos': 'right',
      \     'linter_hints': 'right',
      \     'linter_ok': 'left',
      \     'virtualenv': 'left',
      \     'fugitive': 'left'
      \ }
      \}

nnoremap <leader>fg :Telescope live_grep prompt_prefix=🔍<cr>


"wiki.vim
let g:wiki_root = '~/vimwiki'
"nnoremap <leader>wj :WikiJournalIndex<CR>
nmap <leader>wj <plug>(wiki-journal-index)

" Terraform settings
let g:terraform_align=1
let g:terraform_fold_sections=0

let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
